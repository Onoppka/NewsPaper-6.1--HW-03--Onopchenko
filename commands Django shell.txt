python manage.py shell
from news.models import *

# 1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).
user1 = User.objects.create_user(username="Игорь")
user2 = User.objects.create_user(username="Василий")

# 2. Создать два объекта модели Author, связанные с пользователями.
author1 = Author.objects.create(user=user1)
author2 = Author.objects.create(user=user2)

# 3. Добавить 4 категории в модель Category.
cat_sports = Category.objects.create(category_name="Спорт")
cat_politics = Category.objects.create(category_name="Политика")
cat_technology = Category.objects.create(category_name="Технология")
cat_culture = Category.objects.create(category_name="Культура")

# 4. Добавить 2 статьи и 1 новость.
# Статья №1
post_article_1 = Post.objects.create(
    author=author1,
    post_type='article',
    title="Свежая статья о спорте",
    content="Это новая спортивная статья.",
)

# Статья №2
post_article_2 = Post.objects.create(
    author=author2,
    post_type='article',
    title="Самая актуальная политическая статья",
    content="Рассказываем о самых актуальных политических событиях в стране и не только."
)

# Новость
post_news = Post.objects.create(
    author=author1,
    post_type='news',
    title="Новости технологий",
    content="Новые технологии будущего!"
)

# 5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2
# категорий).
post_article_1.categories.add(cat_sports, cat_technology)
post_article_2.categories.add(cat_politics)
post_news.categories.add(cat_technology)

# 6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте
# должен быть как минимум один комментарий).
comment1 = Comment.objects.create(
    post=post_article_1,
    user=user1,
    text="Шикарная статья!",
)

comment2 = Comment.objects.create(
    post=post_article_2,
    user=user2,
    text="Очень информативно и свежо!",
)

comment3 = Comment.objects.create(
    post=post_news,
    user=user1,
    text="Всем рекомендую к прочтению!",
)

comment4 = Comment.objects.create(
    post=post_article_1,
    user=user2,
    text="Не совсем точно, но пойдет!",
)


# 7. Применяя функции like() и dislike() к статьям/новостям и комментариям,
# скорректировать рейтинги этих объектов.
post_article_1.like()
post_article_2.dislike()
post_news.like()

comment1.like()
comment2.like()
comment3.dislike()
comment4.like()

# 8. Обновить рейтинги пользователей.
author1.update_rating()
author2.update_rating()

# 9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая
# поля первого объекта).
authors = Author.objects.all().order_by("-rating").values("user__username", "rating")
best_author = authors[0] if authors else None
best_author


# 10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей
# статьи, основываясь на лайках/дислайках к этой статье.
from django.db.models.functions import Substr
posts = (Post.objects.annotate(preview=Substr('content', 1, 100)).order_by('-rating').values('pk', 'created_at', 'author__user__username', 'rating', 'title', 'preview'))
best_post = posts.first()

# 11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
Comment.objects.filter(post=best_post["pk"]).values("created_at", "user__username",  "rating", "text")